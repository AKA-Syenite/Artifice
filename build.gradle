buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.

ext.mc_version = "1.7.10"
ext.mod_version = "1.1.5R"
ext.build_number = System.getenv("BUILD_NUMBER")
if (!ext.build_number) {
    ext.build_number = System.getenv("TRAVIS_BUILD_NUMBER")
}
if (ext.build_number) {
    // add the build # of the last jenkins build for consistency
    version = ext.mc_version + "-" + ext.mod_version + "-" + (349 + System.getenv("TRAVIS_BUILD_NUMBER").toInteger())
} else {
    version = ext.mc_version + "-" + ext.mod_version + "-" + "DEV"
}
group = "com.shukaro.artifice"
archivesBaseName = "Artifice"

project.ext.set('fullVersion', version)

if(ext.mod_version.endsWith("A")) {
    project.ext.set('curseType', 'alpha')
} else if(ext.mod_version.endsWith("B")) {
    project.ext.set('curseType', 'beta')
} else {
    project.ext.set('curseType', 'release')
}
project.ext.set('curseProjectID', '223174')
project.ext.set('modsioProjectID', '1139')

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.10.2-12.18.3.2185"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20161111"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

def getGitChangelog = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        def gitHash = System.getenv("GIT_COMMIT")
        def gitPrevHash = System.getenv("GIT_PREVIOUS_COMMIT")
        def travisRange = System.getenv("TRAVIS_COMMIT_RANGE")
        if(gitHash && gitPrevHash) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:%s - %aN', '' + gitPrevHash + '...' + gitHash
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } else if(travisRange) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:%s - %aN', '' + travisRange
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } else {
            return ""
        }
    } catch(ignored) {
        return ""
    }
}

task publish(dependsOn: ['build','curseUpload', 'modsioUpload'])

task curseUpload(type: Exec) {
    executable 'curl'
    // 4449 = 1.7.10
    args = ['-F', 'metadata={\"releaseType\":\"' + project.curseType + '\",\"changelog\":\"' + getGitChangelog() + '\",\"gameVersions\":[4449]}',
            '-F', 'file=@./build/libs/' + archivesBaseName + '-' + project.fullVersion + '.jar',
            '-H', 'X-API-Token: ' + System.getenv('CURSE_API_KEY'),
            'https://minecraft.curseforge.com/api/projects/' + project.curseProjectID + '/upload-file']
}

task modsioUpload(type: Exec) {
    executable 'curl'
    args = ['-F', 'body={\"version\":{\"name\":\"' + project.fullVersion + '\",\"minecraft\":\"' + project.minecraft.version + '\",\"changelog\":\"' + getGitChangelog() + '\"},\"filename\":\"' + 'Artifice-' + project.fullVersion + '.jar' + '\"}',
            '-F', 'file=@./build/libs/' + archivesBaseName + '-' + project.fullVersion + '.jar',
            '-H', 'X-API-Key: ' + System.getenv('MODSIO_API_KEY'),
            'https://mods.io/mods/' + project.modsioProjectID + '/versions/create.json']